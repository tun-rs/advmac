# 工作流的名称
name: Rust CI

# 配置工作流的触发器
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 当有针对 main 分支的 Pull Request 时触发
  pull_request:
    branches: [ "main" ]

# 为工作流设置一些环境变量
env:
  # 让 Cargo 的输出总是带颜色，更易读
  CARGO_TERM_COLOR: always

# 定义工作流中的任务（jobs）
jobs:
  # 定义一个名为 "build-and-test" 的任务
  build-and-test:
    # 指定运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 定义此任务的执行步骤（steps）
    steps:
      # 第一步：检出（Checkout）你的代码库
      # 这样工作流才能访问你的项目代码
      - uses: actions/checkout@v4

      # 第二步：安装 Rust 工具链和所需的组件 (clippy, rustfmt)
      # 使用 dtolnay/rust-toolchain action，这是目前推荐的方式
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      # 第三步：缓存 Cargo 依赖项
      # 这会缓存 target 目录和 cargo registry，大大加快后续构建速度
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      # 第四步：检查代码格式 (cargo fmt)
      # --check 参数会让命令在代码未格式化时失败，而不是直接修改文件
      - name: Check formatting (cargo fmt)
        run: cargo fmt --all -- --check

      # 第五步：运行 Clippy 进行代码质量检查
      # -D warnings 会将所有 Clippy 警告（warnings）视为错误（errors），从而使 CI 失败
      # 这有助于强制执行高质量的代码标准
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # 第六步：运行测试 (cargo test)
      # --verbose 参数会提供更详细的测试输出，便于调试
      - name: Run tests
        run: cargo test --verbose --all-features
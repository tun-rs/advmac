name: Rust CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-and-test:
    name: Check & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # 安装 Rust 工具链，并确保 fmt 和 clippy 组件存在
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: clippy, fmt

    # 新增：为 Cargo 设置缓存，极大提升后续运行速度
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        # 缓存 target 目录和 cargo registry/git a索引
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        # 当 Cargo.lock 文件变化时，缓存失效
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # 1. 检查代码格式
    - name: Check formatting
      run: cargo fmt --all -- --check

    # 2. 运行 Clippy
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    # 3. 运行测试
    - name: Run tests
      run: cargo test --all-features --verbose

    # 4. 构建 Release 版本
    - name: Build release
      run: cargo build --release --all-features

  # publish 任务保持不变，但可以依赖新的 check-and-test 任务
  # publish:
  #   runs-on: ubuntu-latest
  #   needs: [check-and-test] # 依赖新的任务名
  #   if: startsWith(github.ref, 'refs/tags/')

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Publish to Crates.io
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: publish
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}